# xyFit.fit: Beispiel xy-Fit mit kafe2go

# Illustrate fitting of an arbitrary function with kafe2go
# equivalent to the python example test_k2Fit.py

# This example demonstrates some special features of the kafe2 package and
# of kafe2go, in particular how to specify all supported types of uncertainties:
#
#   - correlated errors for x and y data  
#   - relative errors with reference to model
#   - profile likelihood method to evaluate asymmetric errors
#   - plotting of profile likeliood and confidence contours
#
# Uncertainties are added in quadrature to form the overall
# covariance matrix of independent and correlated uncertainties used
# in a full fit based on the maximum likelihood principle. For
# for errors that are independent from the true model values,
# this is equivalent to the least-squares method. 

# The model definition also shows how to specify latex expressions
#  for the model, the model function and the model parameters.

# Please refer to the example kafe2go_simpleFit.fit for a minimalistic,
#  light-weight example which is sufficient in most cases.

# To run this example, simply type
#
#     > kafe2go kafe2go_xyFit.fit
#
# or, on MS Windows,
#           right-klick on  kafe2g_xyFit.fit and open with kafe2go.exe

# remark: 

# ---------------------------------------------------------------

label: Beispieldaten
x_label: 'x'
x_data: [0., 0.2, 0.4, 0.6, 0.8, 1., 1.2, 1.4, 1.6, 1.8, 2., 2.2, 2.4, 2.6]
x_errors:
# independent
- type: simple
  error_value: 0.05   
  relative: false
  correlation_coefficient: 0.
# correlated
- type: simple
  error_value: 0.03    
  correlation_coefficient: 1.
  relative: false
# uncorrelated relative
- type: simple
  error_value: 0.04    
  correlation_coefficient: 0.
  relative: true
# correlated relative
- type: simple
  error_value: 0.02
  correlation_coefficient: 1. 
  relative: true

y_label: 'y / f(x, *par)'
y_data: [ 1.149, 0.712, 0.803, 0.464, 0.398, 0.355, 0.148,
          0.328, 0.181, 0.140, 0.0651, 0.005, -0.005, 0.116 ]
# y-errors contain components dependent on the model values
#  and are therefore specified under a special label:
parametric_model:
  y_errors:
  # independent
  - type: simple
    error_value: 0.07
    correlation_coefficient: 0.
    relative: false
  # correlated
  - type: simple
    error_value: 0.04    
    correlation_coefficient: 1.
    relative: false
  # uncorrelated relative
  - type: simple
    error_value: 0.05    
    correlation_coefficient: 0.
    relative: true
  # correlated relative
  - type: simple
    error_value: 0.03
    correlation_coefficient: 1. 
    relative: true

# model specification
model_label: 'Exponential Fit'
model_function: 
  python_code: | 
    def exp_model(x, A=1., x0=1.):
      return A*np.exp(-x/x0)

# here, we specify "nice" LaTeX labels for result figure   
  model_function_formatter:
    latex_name: "f\\,"
    latex_expression_string: "{A}\\,\\exp({x}/{x0})"
    arg_formatters:
      A: "{A}"
      x0: "{x_0}"
